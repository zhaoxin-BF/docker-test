// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/1.x-compatibility-metrics.csv (3.806kB)
// scripts/check-step.sh (7.585kB)
// scripts/dcp-metrics-included.csv (5.487kB)
// scripts/default-counters.csv (4.483kB)
// scripts/set-dcgm-exporter.sh (686B)
// scripts/set-systemctl-service.sh (796B)

package sc_bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scripts1XCompatibilityMetricsCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x97\xdd\x6e\xdb\x38\x10\x85\xef\xfd\x14\x03\x18\x8b\x36\x80\x1b\x60\x1f\xa1\x75\x9a\x36\xbb\x71\x11\x64\xd3\x6c\xef\x04\x8a\x1c\x49\x44\x28\x92\x3b\x1c\xd9\x71\x9f\x7e\x41\xea\xc7\xb2\x63\x2b\x4e\x74\x95\x48\x3c\xdf\x21\x87\x1c\xce\x78\x0e\xd7\x8e\x6a\xc1\xb3\x39\xdc\x14\x60\xb4\x45\x08\x2c\x88\x03\x6c\x34\x57\x20\xe0\xc3\xfc\x03\x68\x06\x1d\x40\x3a\x1b\xb4\x42\x42\x05\x02\xa4\xab\x6b\xb4\x51\x76\xb5\xfc\xb6\x82\xeb\x9b\xaf\xb7\x57\x0b\xb8\x23\x57\x23\x57\xd8\x04\xa8\x91\x49\x4b\xe0\xad\xc7\x05\x54\x68\x3c\xd4\x18\x82\x28\x71\x36\x9b\xc3\xd2\x38\xf9\x14\x66\x4a\x96\x75\x16\xea\x4c\xc6\x7f\x17\x10\x9f\x52\x34\x25\x2e\xe0\x9f\x15\xa4\x97\x50\x10\xfe\xd7\xa0\x95\x5b\xf8\xa8\x2d\xac\xbe\xff\xbe\xb8\x6c\x65\x35\xd6\x8e\xb6\xbd\xb4\x93\xad\xd2\xcb\x09\xe9\x6c\x0e\x0f\x58\x7b\x24\xc1\x0d\xe1\x1e\x89\xb1\xf6\x87\x20\xde\x8d\x4d\x90\x65\xef\x5e\xfa\xa6\x13\xec\xe6\xfc\xed\xee\xe7\x51\xc1\x6c\x0e\x77\x6e\x83\xd4\x2a\x7d\xfc\x33\x6b\x62\x24\xda\x15\x0f\x4f\x87\x49\x63\x41\x91\xd8\x24\xc2\xbf\xbd\x25\x3b\x16\x26\x43\x8b\x54\x6e\xb3\xb8\x17\x4d\xed\x59\x3b\xbb\x00\xe9\x1a\xcb\x48\x0b\x78\x88\x43\xa0\x1d\x02\xa3\x21\x10\xb4\x95\x08\xb9\x73\x9c\x98\xf5\x5f\xdd\xb4\x96\x37\x5d\x0c\xbc\xd4\x98\xf1\x73\xc6\x15\xb9\xa6\xac\x7c\xc3\x0b\x38\xe4\xda\xa6\xce\x91\xc0\x15\x90\x6f\x19\x03\x30\x09\x1b\x6a\xcd\x8c\x0a\x3a\x5d\x22\xc2\xc3\xaf\xe4\xf2\xf7\x97\x0b\x58\x6b\x01\x3f\x1e\x57\xb7\x97\x23\x1b\x7a\x9b\x0d\xa1\x44\xbd\x3e\xf4\xb8\x7f\xc5\x03\xbd\x11\x31\x4c\x1d\xfa\xa4\x47\x82\x51\x3c\xab\x18\x52\x4c\x7e\xb2\x36\xfa\xb7\x48\x61\xfb\xc8\x15\x42\x10\xb5\x37\x08\x1e\x49\x3b\x05\x6b\x11\x47\x82\x42\x8f\x56\x69\x5b\x82\xb3\x10\x47\x79\x72\xaa\x91\x7c\xb1\x3b\x1e\xcd\x0e\xb4\xd8\xdb\xe0\x78\x4e\x9a\xb1\x8b\xb6\xf0\xc7\xe8\x58\x67\xd2\xf9\xed\xbe\x7c\xff\x54\x9e\x14\xa3\x95\xa7\x6d\xbf\x5a\xe9\x14\xd2\x69\xb5\xc2\x09\xf5\x15\x9e\x56\xcf\xe6\xf0\x95\xc8\x51\x00\x61\x15\xac\xb5\x33\xe9\x7b\x97\xdf\xcf\x5a\x65\x98\x3e\x2f\x8e\x9c\xf6\x47\x61\x1a\x8c\x1b\x11\x83\x68\x44\x60\xf8\x75\x73\x05\x69\x3c\xa0\xed\xb6\x0d\xd5\xe5\x6c\x0e\xa3\xf4\x19\x3c\x7a\xe4\x6e\x7f\x2b\x72\xcc\x26\xee\x8c\x6a\xa8\x9d\xa7\x6a\x10\xd8\x41\x92\xa6\xb4\x60\x12\xda\x72\x48\x0b\x68\xc2\xc5\x00\xe7\x0a\xa9\x16\xe6\x10\x7f\x0e\xbc\x93\x4e\xe2\xc3\xd6\xca\x2c\x77\x2e\xf0\x9e\xc3\x39\xf8\x28\xfd\x94\xa4\x93\x0e\xb9\x13\xa4\x32\xa3\x6b\xbd\x67\x71\x8e\x43\x92\x42\x92\x4e\x5a\x18\xb7\x49\xa7\xe4\x20\x48\xe7\x58\x18\xb7\x79\x71\x7e\xc6\x68\x42\xa3\x45\xae\x8d\xe6\xed\x5b\x67\x3f\x92\x1e\x9f\xfd\x6c\x3e\x64\x4f\x2a\x42\xc9\xb0\xc8\xb3\x82\x10\x87\xfc\xba\x26\x51\x63\xde\x14\x05\x12\xb4\x55\x21\x16\x91\xf6\x26\x5f\xe9\x2f\x7d\xa2\x14\x79\xd6\x04\x54\x53\xb2\xf8\x7d\x24\x8b\x19\xb2\x5c\xf6\xeb\x44\x29\xb3\x90\x63\xb6\x4e\x4b\x34\xd8\x5e\xed\x53\x37\x61\xd0\xb6\x34\xf8\x29\xd7\x0c\xbd\x28\x02\xdb\x3c\x09\x97\x63\xb0\x7a\x13\x58\xb9\x26\x3f\x13\x1c\x67\x2c\xca\x92\xb0\x14\x3c\x90\xcf\x99\xb1\x47\x0a\x3a\x30\x5a\x9e\x9a\xf3\xf9\xe8\xd1\x9c\x4f\xa0\x67\x73\xb8\x47\xd6\xb1\x53\xf1\xa2\xc4\xb0\x3b\x60\xe9\x65\x96\x5e\xc6\x05\x1d\xe6\xf7\x81\x13\x8d\x21\x43\x2a\xee\x56\x76\xb0\x94\x7d\xbc\x7a\x1f\x7e\xb4\xba\x49\x7c\x57\x7f\x26\xe2\xd4\x62\xfb\x3a\xd5\xaa\x63\xcf\x96\xe2\xf3\xe3\xf1\x56\xdb\xa7\x1e\x6d\xd7\x46\xdb\xa7\xac\x30\x9a\x33\x49\xb2\xbd\xaf\xdb\xea\xf9\xea\x76\xb4\x24\x28\x8c\xdb\x7c\x92\xce\x32\x39\x03\xcb\xfb\x17\xfb\xdc\x59\x28\xc1\xe2\xbd\x16\x51\x3b\x81\xee\x6a\xfe\x11\xf0\xc4\x1e\x74\xe8\xa1\x03\x38\x44\x4a\xb7\x46\x3a\x0a\x7d\x1d\xd9\x6a\x87\xd9\x8e\xc1\xb9\xb0\x6a\xa3\x15\x57\xbb\x29\x0e\xcf\x6b\xe0\x41\xdb\x8f\x0c\x50\x38\x02\x61\x0c\x18\x61\x31\xc4\xed\xfd\xac\x14\x5c\x2d\xef\xba\x2e\xbc\xab\xc4\x85\xce\x3c\xb9\x22\x2b\x29\x43\x5b\x6a\x8b\x99\x90\xac\xd7\xe9\x98\x76\x57\xd9\x7d\xbc\x55\x53\x39\xd6\x35\xa6\x9a\x5c\x92\xf0\x95\x96\x01\x5a\x49\xfc\x21\xd0\xaa\x86\xf2\xdf\x85\xac\xa7\x87\x7a\x84\xdd\x2f\xf6\x0f\x15\x02\xf5\x0e\x72\x2b\x0d\xc6\x96\x21\x36\xfb\x95\x08\x20\x18\x0c\xc6\x0e\xe0\x4f\xd8\x08\xf2\x20\x42\xd0\xa5\xed\xee\xd1\xe3\x46\x4e\xca\xc6\x0b\x2b\xb7\x8b\x09\xa3\x5d\x00\x23\x36\x36\x94\xf1\x67\x8c\xe5\xd8\xba\xb5\xee\x7b\x6d\x50\x8f\xf7\xda\x63\xc6\x68\x83\xa3\x61\x41\x87\x51\xea\xd6\x10\xe3\xd4\x8e\x84\x8f\xdf\x57\xab\xcf\x17\x10\xc5\x47\x42\xb5\x67\xa0\x48\xbc\x08\xd5\x84\x81\xc2\xb5\x96\xd8\x17\x18\x1d\x37\xbe\x10\x72\xec\x12\xfa\x96\x94\xba\xa6\x39\x55\xca\x98\x34\xc7\x17\xd8\xf5\xfc\xa9\xcd\x5e\xbc\xe8\xa3\xf0\x45\x27\xee\x8a\xde\x29\x4a\x81\x9f\x5b\xb8\xb6\xd2\x34\xc9\x38\x77\x5c\x41\x85\x22\x36\x8a\xb1\x15\xf4\x62\x6b\x9c\x50\xc7\x7c\xe9\xfd\xbe\x74\xbe\xef\xff\x01\x00\x00\xff\xff\x2e\x93\xd2\x3f\xde\x0e\x00\x00")

func scripts1XCompatibilityMetricsCsvBytes() ([]byte, error) {
	return bindataRead(
		_scripts1XCompatibilityMetricsCsv,
		"scripts/1.x-compatibility-metrics.csv",
	)
}

func scripts1XCompatibilityMetricsCsv() (*asset, error) {
	bytes, err := scripts1XCompatibilityMetricsCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/1.x-compatibility-metrics.csv", size: 3806, mode: os.FileMode(0644), modTime: time.Unix(1719375600, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0xbc, 0x50, 0x78, 0x71, 0xcb, 0x78, 0xce, 0xc6, 0xf7, 0xc, 0xda, 0x72, 0x8d, 0xe1, 0x78, 0x25, 0x32, 0x62, 0xdc, 0x26, 0xa1, 0x39, 0x92, 0xbd, 0xcd, 0x5c, 0x13, 0x4c, 0x86, 0x7e, 0xce}}
	return a, nil
}

var _scriptsCheckStepSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\xeb\x6e\xdc\xc6\x15\xfe\xbf\x4f\x71\xca\x5d\x74\x93\xd4\x43\xea\x62\xab\xc1\x26\x32\xa0\xf8\x22\x0b\x88\x6d\x41\xb6\xd2\x16\x8e\x21\xcc\x92\x87\xcb\xa9\xc8\x19\x7a\x2e\xbb\x12\x2c\x03\xc9\x6b\xf4\x59\xfa\x36\x79\x80\xbe\x42\x31\x43\x0e\x97\x5c\x72\xe5\x4d\xeb\x56\x3f\x12\x6b\x2e\xdf\x9c\xcb\x37\xdf\x9c\x43\x8d\xff\x10\x19\x25\xa3\x39\xe3\x11\xf2\x25\xcc\xa9\xca\x46\x23\x85\x1a\x08\x56\xff\x13\x50\xb2\x12\x53\xca\xf2\xd1\x88\x71\xa5\x69\x9e\x9f\x1a\x96\xe0\x57\x5f\xc3\xc7\x11\x40\x21\x12\xcc\x8f\x83\xc9\x7e\x30\x02\x88\xa9\x42\x08\x26\x6e\x2c\x00\xc6\x47\xe0\x7e\x82\xa7\x22\xbe\x46\x19\x7c\x5d\xff\x6e\x7f\x30\xce\x84\x9f\x80\xb3\x0a\x97\x6a\x26\x38\x38\xf4\x59\xd0\x5b\xbb\xff\xdb\x2f\xbf\x5e\x2a\x84\x9f\x03\x5a\x6a\xa8\x4d\x81\xc4\x21\x84\x4c\xfc\x1c\x40\x2a\xa4\x1f\x77\x50\x0f\x40\x48\x90\x98\xa2\x04\x2d\x40\x67\x08\x22\x4d\x59\xcc\x68\x0e\xf5\xc1\x89\x88\x4d\x81\x5c\x57\x27\x6f\xee\x0f\xe1\x6f\xc2\x00\x47\x4c\xec\x7e\xa3\xd0\x6f\x5b\xa2\x54\x76\xc3\x63\x38\x78\x18\xee\x85\x7b\x61\xdf\x5a\x00\x52\xdb\xd6\x3d\xe4\x5f\xff\xfc\x47\xa6\x75\xa9\x66\x51\x94\x88\x58\x85\xb5\xfd\xb1\x28\x22\xe4\x0b\xc6\x31\xaa\x2d\x88\xcc\xdc\x70\x6d\xa2\x3e\xf4\xc1\x6f\xbf\xfc\x7a\x96\x82\xce\x98\x02\xa6\x80\xc2\xe9\xf9\x25\xbc\x10\x4a\x3f\x80\xf3\x1c\x6d\x0a\x3a\x3e\xa7\x22\xcf\xc5\x8a\xf1\x45\x63\x88\xb2\x53\x0b\x61\xff\x5b\x3b\x74\x7a\x7e\x79\x61\xb8\x66\x05\x6e\xf5\x64\xbb\x0b\x7c\xc9\x12\x46\x9d\x0b\x09\xd5\x34\x46\xae\x51\x46\x71\x2e\x4c\x42\x38\xd5\x6c\x89\x51\x2c\xb8\xa6\x8c\xa3\x24\x5a\x88\xfc\x9a\xe9\x28\xa7\x1a\x95\xf6\xce\x92\x85\x4d\x7a\x98\xe9\x22\x6f\x1b\xf0\xdd\x77\x9e\x41\xa7\xe7\x97\x4f\x25\x5b\x0e\x92\xa8\x99\xdb\x8d\x47\xaf\x4b\x37\xbd\x3f\x83\x13\xa3\x45\x41\x35\x8b\x3b\x59\x07\xa3\x6c\xb0\x6c\xe8\x94\xa6\x3c\xa1\x32\x81\x4b\x97\x0b\x90\x58\x0a\xc5\xb4\x90\xb7\x7d\xd8\x2a\x5d\x24\x71\x96\x28\x48\x70\xc9\x62\x54\xfd\x75\xca\x24\x02\x36\x16\x53\xa3\x45\x6d\xc2\x56\x7b\x0f\x66\xf0\x92\x72\x43\xf3\x6d\xc6\x36\xdc\x7e\xf5\xd3\xd9\xd3\xb3\x13\xa8\xc0\xfb\x78\x4f\xc5\x8a\xe7\x82\x26\x6e\x93\xa5\x4e\xb5\x10\x52\x29\x0a\x37\x56\xef\x5f\xe1\x5c\x31\x8d\x33\xf0\xc9\x5e\xad\x56\xed\x5c\x7b\x9c\x88\xf1\x04\x6f\x42\xaa\xca\x9b\xfe\x61\xab\x85\xd5\x90\xd8\x61\xcc\xa2\xc8\x58\xc2\x57\xdb\xda\x50\x7f\x7d\x2e\x11\xbf\x3d\x8a\x7e\x64\xdc\xdc\x90\x9b\x6f\x8f\xae\x8e\x1e\x46\x8f\x0e\x1f\x85\xdf\x7c\x13\x55\xd6\x90\xf6\x14\xa9\xa6\x42\x69\xf8\x96\xf8\xc6\x59\x21\x12\xa0\x7f\xba\x81\xa1\xed\x0f\x1f\xee\x85\xdf\x1e\xdc\xb3\x3d\x1c\x3c\x75\xbd\x0d\x08\x17\x44\x94\xc8\x17\x39\x49\x59\x8e\xca\x0d\x70\x61\x96\x48\x0d\x89\x33\x8c\xaf\x87\x69\xfc\xf4\xc9\xe9\xcb\x0e\x83\xc7\x10\x8b\xa2\xa0\x3c\x51\xfd\x3c\x3d\x39\x7d\xb9\x1b\xa3\x87\x6e\x7d\xc3\x86\x0e\x5b\xfa\x7a\x67\xd7\x4a\xfc\x60\x98\xc4\xa4\xd1\xb5\xc3\xf0\x30\x7c\x64\xc5\x93\xce\xc5\x12\x07\xd4\xad\xb9\xff\xb8\xc4\x5c\x94\x28\x3b\x22\x10\x2f\x8a\xb1\x67\x87\xda\x72\x9f\x7f\x3c\xfb\xe1\xc9\xae\x91\x70\x8b\x77\x7c\x24\x42\x78\x5d\x22\x77\x6e\x45\xa8\xe3\x88\x96\x3a\x52\xc2\xc8\x18\x55\x98\x33\xa5\xc1\xe6\x6b\x60\x23\x00\x2c\xd9\xf0\x96\x01\x05\x0e\xe1\x24\x49\x40\x70\x1b\xe7\x0d\x91\x5d\x6b\x04\x20\xd7\x92\xa1\x1a\x3e\x8d\x40\x82\x73\x7f\x2f\x14\xc6\x46\x32\x7d\x1b\x56\xc2\xe0\xc2\x58\xfd\x13\xfe\x4e\x8b\xe2\x96\xf8\x05\x50\x50\x36\xc0\xda\x4d\x3c\x9d\x85\x54\xc6\x19\x5b\xe2\x36\xc4\x2d\x40\x87\x21\x5c\x96\x09\xd5\xe8\xbc\x2a\x69\x7c\x4d\x17\x08\x36\x0a\x5b\xdc\xb0\x6f\xb1\x71\x3b\xfa\xd3\x0f\x2d\xd8\x42\xd2\xa4\x42\xab\x99\x88\x89\xc7\xbd\x17\xd2\xed\xeb\xcf\x3f\x0a\xe1\x02\x0b\xb1\x44\xa0\xfc\x16\x0c\x37\x6a\x27\x3c\xab\xb0\xd2\xed\xeb\x2f\x39\x0a\x3d\xb7\x2a\x49\x74\x6c\xab\x21\xb7\x23\xfa\x02\x24\x67\xf3\xf8\xa8\xbf\xea\xcf\x21\x3c\xb1\x3a\xd0\x82\xf4\xb7\x6b\x7e\x0b\xd2\x70\xce\xf8\x62\x18\x5d\x69\xc9\xf8\x42\x41\x94\xb3\x79\x54\x6b\x4f\xee\x84\x68\xc1\x8d\x1d\x8c\x43\x25\xc2\x23\xb8\x83\x85\xc4\xb2\x02\x1f\x04\x7a\x9b\x61\x73\xa8\xca\x84\xc9\x13\x98\xa3\xdd\x44\xb5\x15\x8a\x8c\x72\x38\x08\x0f\x1f\x85\x5b\xb4\xca\x95\x06\xad\xca\x60\x57\xdd\xda\xd8\xb7\xf3\xc5\xfd\x01\x53\x21\x1b\x9a\xf8\x67\x2d\x69\x2a\x14\x1b\x35\x0b\xf8\x00\xca\x4a\xf0\x9c\xd0\x02\x4b\xd7\x45\xa0\xad\x87\x1a\x9a\x85\x70\x96\x02\x17\xba\x59\xef\x05\x72\xfd\xa4\xfd\xc7\x25\x58\x08\xcf\x6b\xf1\xec\xb9\xdb\x11\xdc\x02\x75\x26\x92\x9e\x05\xed\x77\xb6\x51\xea\x8e\x38\x3f\x80\xff\x53\x8d\xd5\xdc\xfb\x93\xb4\x62\xc5\x86\x07\x4c\xd9\x54\x97\x39\x6a\x7b\xe5\x12\x9f\x0f\xa6\x40\xa2\xd2\x54\x6a\x6c\xb9\x67\xf8\x86\x1a\x7a\x96\x58\x9f\x9b\x74\xf9\xc2\x43\xfa\x88\x29\x50\x26\x8e\x51\xa9\xd4\xe4\xf9\xed\x3a\x83\x5b\x84\xee\x8d\x3d\x16\x28\x34\x1e\x5b\x2e\x6b\x5b\xa0\x2b\x8b\x3b\xf3\x36\xba\x97\x3a\x01\xc2\x69\x81\x60\x43\x41\x16\xa5\x21\x36\xc5\x37\x40\x88\x2c\x80\xd8\x01\x05\xf6\x1a\xbb\xd1\x2d\xe7\x3d\xbb\xc1\xd8\xd4\x92\x58\x3b\xd4\xf8\xd3\x1c\x86\x37\x18\x03\x61\x7a\xf3\xa0\x2a\x73\x44\x15\xac\x8f\x1e\x0b\x29\x31\xd6\xa0\x34\x96\x70\x08\xa5\x64\x5c\xdb\xa8\x89\x75\x8c\x18\x4f\x05\x14\x48\xb9\xba\x37\x35\x2d\xec\xe6\x06\x7f\xd3\xba\xb0\x63\x48\x30\xa5\x26\xd7\x03\xf7\xb6\xb2\xe5\xd9\x12\xe5\xc9\x19\xb9\xc0\xea\xe9\x23\xaf\x44\xf2\xb9\xab\xeb\x4e\x42\x45\xe3\xd1\xa7\xd1\xc8\x45\xa3\xba\x0c\x75\x6b\x38\xae\x15\x90\xa5\xbe\xcd\x68\xdf\xce\x11\xd8\x09\x1f\x4e\xb2\xf4\x71\xfc\xe3\x63\xb0\x65\x45\xc4\x4d\x9e\x7f\x67\x7d\xf6\x5d\x64\xa7\x63\xec\xdc\x73\x6b\x12\xe6\x0a\x3b\x0b\xdf\x3d\xbb\xb8\x78\x7d\xf1\x7e\xd6\x3a\x9b\x0b\xbd\xb1\xcb\xfe\xb4\x9b\xda\x7a\x71\x3d\x23\x51\x1b\xc9\x61\x7f\x04\x90\xb2\x51\xcb\xa3\xf5\xbd\xf7\xfa\x3a\x02\xc8\x45\x4c\x7d\x3f\x7a\x55\x0f\x1f\x4f\xbe\xaa\xdd\x22\xc4\x2b\xf1\x1d\xd0\xd5\x35\x4c\x3f\xba\x6c\xc3\xe4\xf0\xd3\xd4\xe6\xa9\xe3\x5d\xbd\x74\x06\x93\x2e\x5c\x30\xea\x86\x55\xb7\x04\xbe\x26\x03\xd5\x6c\x9e\x23\xac\x98\xce\x06\x6b\xbb\xc6\x50\x3f\xd1\x98\x1a\x1c\x1c\xd9\x5e\x36\xa8\x12\xf3\xee\x1d\x04\x9b\xa7\xc3\xf7\x10\x4c\x36\xf7\x05\xf0\xfe\xfd\x40\x9e\x36\xc3\xef\xcd\xdc\xc0\xf4\x69\x59\x9b\x6e\xdf\xf7\x8d\x72\xd4\x36\xb9\x1a\xac\xc4\x68\xe8\x9d\xff\xbb\xf3\xd8\xfc\xbe\xd7\xd0\xb6\xe9\x20\xfb\xcc\xed\x34\x53\xf7\x13\x78\x7d\xd3\xb7\x91\xb8\x0a\xcd\x76\xc8\x2e\x93\xb7\xac\x1e\x62\x71\xc7\xf7\xc6\x9b\xd1\x67\x49\xdc\x05\xef\x71\xd9\x0d\xb7\xb8\xdc\xf2\x90\x64\x70\x07\x19\x52\x2b\xaf\xb0\xdf\x25\xf5\xe4\xe8\xd3\xb4\x1e\x21\xcf\x61\xba\x9c\x36\x13\x07\x6d\xb2\x0f\x1e\x6e\x39\xdf\x39\x76\x88\xf3\xdd\x2d\x5f\x80\xfa\xb6\xa1\xdc\xeb\x52\xbf\x6b\xc4\x2e\xd4\xbf\xc7\xab\x4d\xa7\xbe\x18\xed\x7f\x4f\xe2\x7b\xb4\xb7\x1d\xe6\x80\x56\xdb\xbe\xf3\x7e\xa5\x8e\x17\x9f\xe3\x78\x0f\x64\x88\xda\x7e\xd1\x67\x19\x6d\x17\x7e\x9e\xcc\x0e\xae\xc7\xe1\x78\x51\xb4\xd5\xd8\x99\x4e\x96\xbe\x78\x0e\x7e\xaa\x53\x79\xaf\x2a\xb7\x80\x2d\x3f\x5b\x90\x43\xec\x6c\x2f\xff\x02\xdc\x74\xcd\x78\x87\x9a\xed\xf3\x77\x27\x66\xc7\xac\x0e\xc8\xff\x86\x8d\xdb\x93\xd6\xd7\x5f\xdb\xc2\x6c\x30\xb1\xd7\x37\x35\x21\x5a\xd8\x16\xa8\x95\xd3\x9d\xfb\xa5\x75\xbb\x74\x75\xa7\x29\xcb\xad\x74\x1d\xdc\x35\x22\x76\xe7\x05\xeb\x6a\xba\x26\x42\x47\xb1\x3a\xf6\xcc\x60\xd2\xb1\x64\x88\x0a\xd5\x86\x2f\xf9\x46\x87\x87\x1d\x2e\x74\x2d\xd8\x9d\x0c\x1b\x86\x75\x71\xfe\x7b\x3e\x0c\x89\x93\x3d\x71\x80\x0f\xdd\xd2\x71\xdd\x47\x39\x3a\x8c\x9d\xa7\x49\x79\xbd\x20\x1f\x0c\xca\x5b\x20\x7f\x01\x92\x1e\x4f\x27\x1f\xdf\x68\xaa\x8d\xfa\x34\xf5\xaf\x6e\xaf\xfb\x81\x83\xc7\x8d\x3c\xf9\xdb\x4e\x3e\x40\xe0\xfb\x76\x71\xdd\xea\x33\xea\xf8\x8c\xdb\x15\xcc\x56\x60\xeb\x79\x2e\x91\x26\xb7\x1d\xd5\x1a\xd7\xfa\xb6\x33\x48\x57\xf6\x7c\xad\x6d\xeb\x7f\x2e\x56\x61\x58\x41\x6e\xa9\x6c\xd6\x71\x1a\x8d\xc7\xe0\x3e\x5a\xd2\x52\x93\x05\xae\x3f\x4c\x90\xdb\xad\xb1\xb1\xc0\xd5\x55\x7c\xfb\xec\xcd\xdb\xab\x57\x27\x2f\x9f\x1d\x07\x3a\x63\x8a\x30\xd5\x5a\x6d\x9b\x23\xe2\xda\x99\xba\x3b\x1a\xd7\x3d\x5c\x5d\xd3\xae\x32\xd4\x19\x4a\x50\xa8\x9b\xa3\xf4\xb5\x6f\xeb\x2a\x96\x6e\xb4\x62\xb6\xeb\x02\x52\x75\x64\x93\xe6\xf0\x5e\x23\xb6\x91\xbc\xcd\x16\xab\xb5\xb3\x55\x92\xb4\xf6\xf4\xf8\x5e\x23\xf4\xad\x6c\x67\x53\xa1\xae\x85\xac\x5e\x7e\xcd\xf2\xbc\x75\x58\xff\x05\xbb\x17\xd6\xe6\x57\xa1\xee\x7e\xae\x08\x1a\xd6\xa7\x86\xc7\xae\xaf\x72\xe3\xb5\xfa\x31\x75\x7a\x7e\xf9\x42\x28\x7d\x1c\x4c\x3e\xee\xcf\x88\x96\x06\x3f\x39\x65\x69\x5d\x92\x51\x2d\x00\x10\x4c\x9a\xf5\x01\x1c\x83\x5d\x0c\xed\xbb\xde\x2d\x6e\xd7\x43\x8d\x34\x0f\xde\x3c\xe7\xe6\x10\x7e\x4a\x73\xd5\x3d\x60\x0c\x2f\x28\x4f\x72\x04\x2e\x38\xb1\xed\x6a\x26\x94\x76\x7f\x06\x6c\x05\xe9\xa2\xfa\xd8\x05\x82\x03\xed\x2c\x1c\x28\x09\xce\xf8\x92\xe6\x2c\x81\x25\xcd\x0d\xba\x0f\xd4\x67\x6f\xae\x4e\xcf\x2f\xaf\x5e\xbc\x7e\xf3\x36\xf4\x7f\xdf\x32\x0a\x61\x6a\xbd\x9d\x82\x90\x30\x75\x76\x4d\xeb\xd4\xe1\x0d\xd3\xad\xb7\x66\xfd\xbe\xd8\x98\x8f\xe1\x89\xff\xcc\x57\x31\xb9\x49\x42\x4b\x8c\xab\x06\x18\x4a\xaa\xb3\x51\x1d\x86\x71\x00\x84\x23\xec\xb7\x9c\xaf\xec\xbd\x54\x74\x81\x33\x98\xec\xc1\xf7\x2d\x43\x1f\x07\x30\x6e\x1b\x5e\xfd\x99\x6e\x2e\x44\x8e\x94\x57\xbe\x3d\x68\x1a\x72\xa6\x5c\xe2\x46\x8d\xe9\xd6\xf0\xca\xba\x60\xb2\x1f\xfc\x3b\x00\x00\xff\xff\xff\xd1\x00\x98\xa1\x1d\x00\x00")

func scriptsCheckStepShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsCheckStepSh,
		"scripts/check-step.sh",
	)
}

func scriptsCheckStepSh() (*asset, error) {
	bytes, err := scriptsCheckStepShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/check-step.sh", size: 7585, mode: os.FileMode(0644), modTime: time.Unix(1719212044, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x91, 0x3e, 0x7, 0xf6, 0xb2, 0x92, 0xc5, 0xa2, 0x27, 0x3a, 0x1c, 0x55, 0x92, 0x54, 0x52, 0x3f, 0xe9, 0x91, 0x9d, 0xb9, 0xc, 0xa2, 0x8e, 0xd, 0x22, 0xce, 0xbf, 0xeb, 0xd1, 0x23, 0x1a}}
	return a, nil
}

var _scriptsDcpMetricsIncludedCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5d\x8f\xa3\x38\x16\x7d\xcf\xaf\xb8\x52\x69\x35\xdd\x52\xba\xb5\x3d\x33\xea\x77\x02\x4e\x8a\x6d\x3e\x22\x20\xa9\xae\x27\xe4\xc0\x4d\xe2\x1d\xb0\x59\xdb\xa4\xa6\xe6\xd7\xaf\x6c\x48\x2a\xa1\xa8\x54\x6a\xa4\xe1\x15\xce\x39\xf7\xd3\xbe\x97\x3b\x98\x0b\x59\x53\x3d\xb9\x03\x7f\x0b\x15\xe3\x08\x4a\x53\xa9\x15\x3c\x31\xbd\x07\x0a\xbf\xdc\xfd\x02\x4c\x03\x53\x50\x08\xae\x58\x89\x12\x4b\xa0\x50\x88\xba\x46\x6e\x60\x9e\xbb\x08\x61\xee\x93\xc0\x9b\xc2\x52\x8a\x1a\xf5\x1e\x5b\x05\x35\x6a\xc9\x0a\xd0\xcf\x0d\x4e\x61\x8f\x55\x03\x35\x2a\x45\x77\x38\x99\xdc\x81\x5b\x89\xe2\x0f\x35\x31\xd0\x7c\xee\xe7\x1e\x59\xe7\x69\x98\xbb\x41\xec\xfe\x98\x02\xec\x68\xbb\xc3\x29\xa4\x21\x14\xe6\x3b\xd8\x4a\xfc\x5f\x8b\xbc\x78\x86\x4f\x8c\x43\x78\xff\xd7\xe7\xaf\x17\xd0\x90\x9c\xb0\x3d\x34\xc4\x5a\xc8\xe7\x2b\xf0\xc9\x1d\x64\x58\x37\x28\xa9\x6e\x25\x0e\xd9\xe2\xe4\x31\xcf\x48\xb8\x1c\xf2\xe9\x17\x88\xe5\x72\x07\x86\x2c\x96\xab\x1e\x07\x27\x2f\x16\xcb\xd5\x28\x6e\x72\x07\x4b\xf1\x84\xf2\x82\x60\x19\x3f\x90\x24\x5f\xa5\xce\x82\x58\x8e\x97\xa7\x67\xb3\x10\x28\x25\x7d\xb2\x44\x0f\x03\x03\xb2\x38\x73\x82\x9c\x44\x24\x59\x3c\xe6\x6e\x1c\xa5\xab\x70\x99\xf9\x71\x34\x85\x42\xb4\x5c\xa3\x9c\x42\x26\x34\xad\x00\x39\xca\xdd\xb3\x4d\x69\x5b\x37\x9a\x09\x0e\x8a\xf1\x02\x61\x23\x84\xb6\xd4\xf5\x7f\x7a\x23\x5d\x9f\xf4\x59\x3e\x59\xe9\xfa\x24\xcf\x7e\xe6\xd9\x7d\x12\xaf\x16\xf7\xcb\x55\x36\x85\xa1\x00\x6f\xeb\x0d\x4a\x10\x5b\xd8\x3c\x6b\x54\xa0\x25\xe5\xaa\x66\x5a\x63\x09\x7a\x2f\x45\xbb\xdb\x1b\x6a\x84\xec\xa7\x95\xfb\x31\xfb\x0c\x07\x46\x21\x5a\x87\xc1\xd7\x31\xbd\xe4\x63\x7a\x12\x0b\x64\x87\xa1\x58\x32\x26\xf6\x5a\x8a\x2c\x03\xc7\xc4\x6f\x15\x65\x24\x79\x15\xbb\x17\x29\xcb\x29\x4d\xa1\xa3\xb2\xc1\x5a\x69\x56\xb1\xbf\xa8\x8d\xe7\x27\xbd\x47\x50\xb4\x6e\x2a\x84\x06\x25\x13\x25\x1c\xa8\xf9\x12\x4a\x6c\x90\x97\x8c\xef\x40\x70\x30\x5f\x35\x52\x94\x6d\xa1\x3f\xbf\x2a\xa6\x55\xe6\x07\xd3\x8b\x02\x30\xe5\xd4\x9e\xab\x30\x0e\xff\x1a\xeb\x87\x78\xf9\xd8\xc3\x2f\x6b\xf8\x3d\x30\x89\xdc\x11\x59\xc2\x0b\x51\xa2\x7c\x17\xed\x91\x0e\x0d\xd3\x73\xb4\x87\x6f\xa3\x27\x77\x40\xa4\x14\x52\x01\xe5\x25\x1c\x98\xa8\xec\xfb\xcb\xc3\xe1\xa7\xef\xe5\x24\x49\xe2\x24\x9d\x8e\x34\x05\xc0\x9a\x56\x2d\x9a\x8c\x98\x68\x56\x54\x69\xf8\xe9\x7b\x80\x86\x17\x90\xf7\xf9\xc3\xf2\x55\x61\xd9\x76\x5b\xfb\x71\xe0\x74\x5d\xd2\x3d\x2f\xf9\xde\x4b\xa1\x75\x65\x32\x55\xb6\xb2\xb3\xbb\x6c\x11\xb4\x80\xc6\x36\xa2\xe9\x1f\x2d\x29\xe3\x5a\x59\x87\x5a\xf5\x79\xa8\x91\xdd\x93\x24\x74\x82\xa1\xca\x2d\x1a\x7a\x8f\xb2\xa6\xd5\x2d\x2a\xe9\x63\xe4\xe6\xb3\x38\x4e\xb3\x0b\xa1\x5b\x54\xd4\x33\x2f\xbe\x6c\x84\x50\xfa\x16\xa1\x59\xec\x24\x5e\x1e\xf8\xa1\x7f\xa1\x74\x8b\xd0\x46\x50\x59\x42\xc5\x6a\x76\x93\x52\x10\x3f\xd8\x52\x1a\x44\xee\x16\xa5\x4a\x3c\xbd\xaa\xb5\x11\x85\x84\x04\xbe\x33\xf3\x03\x3f\x7b\xfc\xa8\x2f\x12\x2b\x46\x37\xac\x62\xfa\x79\xdc\x97\xc9\xdd\xa9\xe1\xec\xa5\x77\xae\x3b\x9f\xe5\xf3\x84\x90\x53\x67\xce\x25\xad\x71\xd3\x6e\xb7\x28\xa1\xee\x40\x5b\x89\xdd\x55\x11\xb2\xd9\xa0\xc5\xe6\xb3\x7c\x95\x12\xef\x1a\xba\x55\x58\x9e\xa1\x4d\x8b\xb9\xee\xc0\x79\xe2\xba\x79\x3a\x23\xf9\x3a\x0e\xba\x6b\xe3\xca\x39\xa7\x18\xdf\x55\xf8\x65\xc3\x34\x1c\x6c\x7f\x56\x68\x18\xbb\x06\x53\xc3\xb0\x1a\x66\xef\x46\xe6\x52\xb4\x9b\x8f\x31\x1b\x9b\x9d\xc5\xe2\x23\x36\x37\x28\x15\x53\x1a\xb9\xbe\xc1\xea\x5b\xb8\xcf\xac\x7e\x83\x7b\x72\x07\x09\x6a\x66\x66\xa5\x86\xee\x50\xbd\xaa\xbc\xcc\x4f\x88\x67\x9c\x19\x1e\x07\x03\x29\x79\xce\x72\x6a\xd9\x17\xdf\xc6\x9d\x39\xf2\x7b\x7f\x8f\xff\xcc\xbf\xeb\xfc\x4b\x12\x79\x7e\xb4\xb8\x12\xaa\x8e\xf7\x78\xdf\x75\x6a\x66\x70\xb4\x21\x8a\xd6\x01\xe3\x7f\x0c\xb8\xa3\x75\xe0\x47\x3f\x72\x37\x71\xf3\x79\xe0\x67\xdd\xb9\xdf\x5d\xc6\xef\x26\xa6\x23\x84\x6d\x25\x9e\xbe\x14\x82\x6b\x29\x2a\x70\x93\xb7\x52\x7e\xa6\xe4\x39\x99\xf3\x77\x94\x4a\xaa\xe9\xfb\x0a\xfd\x40\x31\xc2\x7f\x25\x33\xbd\xc2\x69\xbc\x78\x83\xd9\x8d\xd7\x24\x19\xe5\x7e\x9f\xb9\x10\x07\x94\xcf\x27\xdb\x47\xf8\x67\x4e\xe4\x3d\xf8\x5e\x76\xff\x62\xf0\xe9\x79\x8f\x7f\x43\x79\xf9\xc4\x4a\xbd\x3f\x7e\xa9\x60\x2b\x24\xd0\xaa\x82\x8a\xf2\x37\x5d\x7a\x91\x0c\xfe\x3d\x18\x82\xcf\x8f\x66\x7c\x35\xf2\x89\x2d\xd0\x42\xb3\x03\x9e\x1c\xfc\x13\x84\x04\xfd\x67\x97\x25\xc6\x8b\xaa\xb5\x55\xb8\x11\x7a\x0f\x7b\xa4\x66\x24\x31\x43\x47\x43\x9f\x2b\x41\x4b\x5b\x92\x6b\x33\x60\x05\xac\x40\xae\xec\x26\xa4\xdb\xcb\x49\xc4\xbc\xcf\x03\xdf\x25\x51\x4a\xf2\x34\x73\xb2\x55\x7a\x3a\x89\x0f\x23\x58\x7b\x10\xd4\xb4\x69\xb0\x04\x29\x9e\x2e\xc9\x56\x91\x1b\x27\x09\x71\x33\x67\x16\x98\xb1\x33\x74\x96\x4b\xe2\xe5\x49\xfc\x90\x9e\xa5\x2f\x3a\x6b\xd6\x33\x26\x1b\xcc\x96\x17\x42\x4a\x2c\x34\xdd\x54\xd8\x27\xf2\x42\xe2\x8a\x00\xdc\x26\xf1\x8e\x40\x12\x3f\x74\xc4\xf9\xdc\xf1\x83\x55\x72\xb1\xb8\x9c\x06\xb4\x87\xbd\x59\x0b\x65\x4f\x6f\x47\xdf\x6d\x27\xb1\xa7\x0a\xb6\x94\x55\x58\x9a\x58\xa5\x9a\x6a\x56\x98\x2b\x75\xcb\x76\xc7\x3b\x97\xf1\xad\xdd\x51\x99\xe0\x5f\x4d\xe6\x15\x82\xb1\x91\x4a\xa0\x0a\x2a\xba\xc1\x4a\x1d\x27\x69\x61\x55\xba\xdd\xf3\xcc\xce\xc4\x5f\x9b\x41\x8f\x24\xe9\xd9\x98\xd7\x41\xa7\xe0\x49\x76\x40\x09\x6b\x73\x92\x0b\x7e\x56\x94\x66\x3d\x78\x05\x3a\xc1\xcc\xdb\x11\x90\x1d\x92\x12\x27\xf2\x2e\x6b\xf7\xa8\x85\x07\x56\x20\xcc\x24\xe5\xe5\x70\x84\x23\x89\x3f\xe8\xb0\x4b\x50\x8a\x92\xd1\xaa\xcf\xd5\x00\x1c\x93\x30\xf7\xa3\x79\x9c\xc4\xa1\xb1\x78\xfa\x02\x8e\x49\xd8\x05\x50\xd4\x70\x18\xb5\xd6\xdc\x7c\xe3\x58\x73\xa3\x5d\xc7\x76\x13\xf4\x05\xba\xc7\x76\x9b\x6a\x4d\x39\xdd\xd9\x03\x1f\xc4\xe6\xbf\x58\xe8\x77\xf8\x8e\x4c\x7e\xe8\x2c\xc8\x05\x9f\xdf\xe3\x58\x4d\x77\xf8\x06\x7a\x3d\xf3\xe3\xf4\x32\x63\x3d\xda\xbe\x39\xa2\x8e\x8b\x42\x69\xe3\x3a\xb1\x24\xcb\x57\x45\xb3\x4c\xe2\x79\xbe\x48\x72\x12\x2d\xfc\x88\xe4\x8e\x9b\xf9\x6b\x5b\xdc\x7d\x51\x27\xa6\x20\x2d\x15\xab\xd1\xf2\xed\x24\x6d\xf6\xac\x50\x80\x7c\xc7\x38\x02\x53\xc7\x03\xe9\xb8\xec\xbc\x98\x6b\xd9\xd3\xf0\x8c\xf6\xb2\x65\xcc\x01\x27\x8f\x0a\xc5\x73\x51\xa1\x59\x90\x20\x0d\x6d\xc3\x50\x0d\x15\x9a\x35\xe7\x1b\x3c\x51\xd9\x00\x55\x8a\xed\x78\x3f\xf4\x8d\x0b\xc5\xae\xbb\x5a\x3a\x91\xfb\x38\xbd\x22\xf4\x72\xa4\x1a\x5a\xb3\x45\x2b\x56\xda\xe4\xf1\x5e\x7d\xb8\xf4\x59\xfa\xa5\xbf\x24\x79\x46\xa2\x34\x4e\x4e\x0e\x0d\xa3\xd4\xfb\x60\xe2\xa4\x91\x2b\x21\xe1\xd3\x7d\x18\x3a\x9f\xa1\x61\xcd\x58\xa8\x2e\x04\xbc\xc4\x79\x15\xaa\x2b\x02\x5d\x62\x8f\xd3\x30\x33\x67\xdc\x96\x16\xe7\x2a\xea\xb8\x80\xcb\xfe\x4f\x81\x1d\xf2\xcd\x35\xf1\x46\x04\xad\x8b\xf3\xe5\xf7\xdf\xaf\x14\xc2\x99\x05\xdb\xe6\xfb\xef\xd6\x33\x05\x54\xe2\x3b\x65\xd0\x73\xff\xf6\xeb\xad\xdc\xbf\xfd\xfa\x51\xee\x6f\xdf\x6f\xe5\xfe\xf6\xfd\x6d\xee\x4b\xe6\xfe\x2f\xd0\xec\x31\x23\xe9\x74\xac\xa6\xec\x46\x6e\x83\x7a\xfe\xf7\xc7\xcc\x1c\x56\xcb\xfe\x3d\xd9\xb4\x0a\xbe\x0c\xef\xe6\x46\x0a\x2d\x0a\x51\xf5\x97\x74\xf7\x6b\xc0\x12\xf5\x57\x75\x87\xe9\xef\xfd\x06\x25\x28\x2c\x04\x2f\xc7\x2c\x4c\x6e\xb3\xf0\xf4\xbf\xe8\x1f\x35\x6f\xf2\xff\x00\x00\x00\xff\xff\x49\x6d\xba\x0c\x6f\x15\x00\x00")

func scriptsDcpMetricsIncludedCsvBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDcpMetricsIncludedCsv,
		"scripts/dcp-metrics-included.csv",
	)
}

func scriptsDcpMetricsIncludedCsv() (*asset, error) {
	bytes, err := scriptsDcpMetricsIncludedCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/dcp-metrics-included.csv", size: 5487, mode: os.FileMode(0644), modTime: time.Unix(1719375600, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xd1, 0x71, 0xb, 0xdc, 0xe6, 0x50, 0x2e, 0x40, 0x4a, 0x59, 0x38, 0xac, 0x1a, 0xeb, 0xd4, 0xc3, 0x34, 0xd0, 0x8d, 0xac, 0x68, 0xee, 0xad, 0xa7, 0x4c, 0x43, 0x4d, 0xb2, 0xb4, 0x8a, 0xdd}}
	return a, nil
}

var _scriptsDefaultCountersCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xdb\x72\xa2\xcc\x16\xbe\xcf\x53\xac\x2a\x6b\xd7\x4c\xaa\x34\xef\x80\xd0\x1a\xf6\x70\xb0\x00\x4d\x72\x45\xb5\xb0\xd4\xde\x03\xdd\xee\xee\x46\x7f\xe7\xe9\xff\x6a\xc0\x03\xc4\xa8\x19\x6f\xf1\xfb\xbe\x75\x5e\xab\x07\x30\x11\xb2\xa4\xfa\x69\x00\xee\x0a\x0a\xc6\x11\x94\xa6\x52\x2b\xd8\x33\xbd\x01\x0a\x3f\x06\x3f\x80\x69\x60\x0a\x32\xc1\x15\xcb\x51\x62\x0e\x14\x32\x51\x96\xc8\x0d\xcc\xb1\xa7\x3e\x4c\x5c\xe2\x39\x43\x98\x49\x51\xa2\xde\x60\xa5\xa0\x44\x2d\x59\x06\xfa\xb0\xc5\x21\x6c\xb0\xd8\x42\x89\x4a\xd1\x35\x3e\x3d\x0d\xc0\x2e\x44\xf6\x5b\x3d\x19\x68\x3a\x71\x53\x87\x2c\xd2\xd8\x4f\x6d\x2f\xb4\x7f\x0d\x01\xd6\xb4\x5a\xe3\x10\x62\x1f\x32\xf3\x3f\x58\x49\xfc\x7f\x85\x3c\x3b\xc0\x4f\xc6\xc1\x7f\xfd\xf3\xfc\xd2\x81\xfa\xe4\x84\x6d\xa1\x3e\x96\x42\x1e\x6e\xc0\x1b\xb3\x53\xf2\x3e\x6b\x90\x29\x59\x90\x20\x89\x53\x3b\x9c\x07\xc9\x89\xc6\x16\x15\xd7\x20\x56\x2d\x11\xee\x90\xb7\x81\x61\x1c\xf4\x06\xa1\x52\x28\x47\x6a\x8b\x19\x5b\x31\xcc\x41\xb3\x12\x61\xcf\x78\x2e\xf6\xf0\x53\x21\x36\xb8\x51\x83\x1b\x65\x86\x6d\xd4\x7c\x1e\x29\xf6\x07\x61\x4b\x25\x2d\x9f\x5f\x4c\x44\x12\x2c\xb7\x28\xa9\xae\x24\xf6\x7d\x0b\xa3\x8f\x34\x21\xfe\xac\xef\x9d\x3e\x43\x6a\xcf\xec\x5e\x58\xa6\xb3\x79\x8b\x83\x53\x4c\xa7\xb3\xf9\x55\xdc\xd3\x00\x66\x62\x8f\xb2\x43\x30\x0b\xdf\x48\x94\xce\x63\x6b\x4a\x6a\x8e\xf3\xaf\x65\xab\x21\x90\x4b\xba\xaf\x89\xde\x7a\x06\x24\x61\x62\x79\x29\x09\x48\x34\xfd\x48\xed\x30\x88\xe7\xfe\x2c\x71\xc3\x60\x08\x75\x28\x50\x0e\x21\x11\x9a\x16\x80\x1c\xe5\xfa\x50\x17\x58\x55\x6e\x35\x13\x1c\x14\xe3\x19\xc2\x52\x08\x5d\x53\x97\xff\x6d\x8d\xb4\x5d\xd2\xb5\xd1\x76\x49\x9a\xbc\xa7\xc9\x6b\x14\xce\xa7\xaf\xb3\x79\x32\x84\x3e\x3d\xaf\xca\x25\x4a\x93\xc7\xe5\x41\xa3\x02\x2d\x29\x57\x25\xd3\xda\xa4\x6c\x23\x45\xb5\xde\x18\x62\x84\xe4\xbd\x16\xfb\x35\x7e\x86\x1d\xa3\x10\x2c\x7c\xef\xe5\xb3\x5a\xf4\x3d\x35\x89\x19\xb2\x5d\x5f\x2a\x7a\x4c\x8a\xcc\x3c\xeb\xa3\xa9\x4a\x12\x7d\x8a\xdb\x59\xaa\xe6\x94\xa6\xe5\x50\xd5\x81\x9a\x6b\x56\xb0\x3f\xb4\x8e\xe5\x4f\x53\xaa\x8a\x96\xdb\x02\x61\x8b\x92\x89\x1c\x76\xd4\xfc\x13\x72\xdc\x22\xcf\x19\x5f\x83\x68\x0a\x7a\x2b\x45\x5e\x65\xfa\xf9\x53\x21\xcd\x13\xd7\x1b\x76\x92\x6f\x4a\xa9\xba\x54\x61\x1c\xfe\x73\xad\x33\xc3\xd9\x47\x0b\xef\xd6\xef\x3d\x30\x09\xec\x2b\xb2\x84\x67\x22\x47\x79\x17\xed\x90\x06\x0d\xc3\x4b\xb4\x83\x5f\xa3\x9f\x06\x40\xa4\x14\x52\x01\xe5\x39\xec\x98\x28\xea\xef\xdd\x31\xf5\xee\x3a\x29\x89\xa2\x30\x8a\xaf\xb7\x04\xc0\x82\x16\x15\x9a\x9c\x98\x78\x16\x54\x69\x78\x77\x1d\x40\xc3\x0c\xc8\xdb\x0c\x62\x7e\x9a\x41\x9d\x66\x5b\xb8\xa1\x67\x35\x3d\xd2\xfc\xce\x19\xdf\x48\xa1\x75\x61\x72\x95\x57\xb2\xb1\x3c\xaf\x10\xb4\x80\x6d\xdd\x86\xa6\x7b\xb4\xa4\xcc\x8c\x28\xe3\x52\xa5\x9e\xfb\x1a\xc9\x2b\x89\x7c\xcb\xeb\xab\x3c\xa2\xa1\x37\x28\x4b\x5a\x3c\xa2\x12\x7f\x04\x76\x3a\x0e\xc3\x38\xe9\x08\x3d\xa2\xa2\x0e\x3c\x1b\x2d\x85\x50\xfa\x11\xa1\x71\x68\x45\x4e\xea\xb9\xbe\xdb\x51\x7a\x44\x68\x29\xa8\xcc\xa1\x60\x25\x7b\x48\xc9\x0b\xdf\xea\x62\xea\x45\xee\x11\xa5\x42\xec\x3f\x55\xdb\x15\x85\x88\x78\xae\x35\x76\x3d\x37\xf9\xf8\xae\x2f\x12\x0b\x46\x97\xac\x60\xfa\x70\xd3\x17\xb3\xec\xce\xe5\x7b\x5c\x75\x9f\xea\xf7\xb4\xf4\x4c\xd9\xb6\x0d\xd1\xae\xbc\x7b\xeb\xee\x1f\x96\xdf\xd8\x72\x83\x53\xe3\xd7\x67\xc0\xa5\xf7\x93\x71\x3a\x89\x08\x39\x4d\x88\x89\xa4\x25\xc2\xb2\x5a\xad\x50\x42\xd9\xa0\x56\x12\x9b\x7d\xe5\x8f\x7b\xad\x3e\x19\xa7\xf3\x98\x38\x37\xd1\x95\xc2\xfc\x8c\x36\xad\x6e\xdb\xbd\x14\x10\xdb\x4e\xe3\x31\x49\x17\xa1\xd7\xac\xae\x1b\xf3\x56\x31\xbe\x2e\x70\xb4\x64\x1a\x76\xf5\x9c\x28\xd0\x30\x36\x6d\xae\xfa\xc9\x35\xcc\xce\x83\xcc\xb9\xa8\x96\xdf\x63\x36\x36\x5b\xd3\xe9\x77\x6c\xde\xa2\x54\x4c\x69\xe4\xfa\x01\xab\x1f\xe1\xbe\xb0\xfa\x0b\xee\xa7\x01\x44\xa8\x99\xb9\x1e\xb7\x74\x8d\xea\x53\xfd\x27\x6e\x44\x1c\xe3\x4c\x7f\x28\xf5\xa4\xe4\x25\xcb\x69\x70\x9c\x7d\xbb\xee\xcc\x91\xdf\xf9\x3b\xfe\x0b\xff\x6e\xf3\xcf\x48\xe0\xb8\xc1\xf4\x46\xa8\x1a\xde\xe3\xde\x6d\xd4\xcc\x29\x5d\x87\x28\x58\x78\x8c\xff\xee\x71\x07\x0b\xcf\x0d\x7e\xa5\x76\x64\xa7\x13\xcf\x4d\x9a\x06\x6e\xfa\xf7\x6e\x62\x1a\x42\x58\x15\x62\x3f\xca\x04\xd7\x52\x14\x60\x47\x5f\xa5\xfc\x42\xc9\xb1\x12\xeb\x6f\x94\x72\xaa\xe9\x7d\x85\xf6\xb0\xb9\xc2\x7f\x23\x33\xad\xc2\xe9\xcc\xf9\x82\xd9\x0e\x17\x24\xba\xca\x7d\x9f\x39\x13\x3b\x94\x87\x93\xed\x57\xf8\xc7\x56\xe0\xbc\xb9\x4e\xf2\x7a\x36\xf8\xf4\xbb\xc7\xbf\xa4\x3c\xdf\xb3\x5c\x6f\x8e\xff\x54\xb0\x12\x12\x68\x51\x40\x41\x39\x2a\x53\x01\x0b\x73\x57\x79\x2c\x43\xae\xea\xa7\x98\xae\xba\x07\x88\xf9\x9e\x7a\xae\x4d\x82\x98\xa4\x71\x62\x25\xf3\xf8\x34\xf8\x76\x57\xb0\x75\xdf\x95\x74\xbb\xc5\x1c\xa4\xd8\x77\xc9\xe6\x81\x1d\x46\x11\xb1\x13\x6b\xec\x99\x6b\xd3\xb7\x66\x33\xe2\xa4\x51\xf8\x16\x5f\x44\x2b\xb8\xe8\x8d\x0b\xa6\xda\xf6\x8a\x67\x42\x4a\xcc\x34\x5d\x16\xd8\xc6\xad\x23\x71\x43\x00\x1e\x93\xb8\x23\x10\x85\x6f\x0d\x71\x3a\xb1\x5c\x6f\x1e\x75\xde\x2a\xa7\xad\xf6\xb6\x31\xef\x52\xd9\xd2\xd7\x17\xef\xaa\x91\xd8\x50\x05\x2b\xca\x0a\xcc\x4d\xac\x62\x4d\x35\xcb\xcc\x1e\x5d\xb1\xf5\x71\xd1\x32\xbe\xaa\x1f\xc9\x4c\xf0\x17\x48\x36\xa8\x10\x8c\x8d\x54\x02\x55\x50\xd0\x25\x16\xea\x78\x40\x8b\x5a\xa5\x79\xfc\x5e\xd8\x19\xb9\x0b\x73\xdd\x91\x28\xbe\xb8\xed\x1a\xe8\x10\x1c\xc9\x76\x28\x61\x61\x06\xa7\xe0\x17\x65\x6d\x5e\x05\x9f\x40\x27\x98\xf9\x7a\x05\x54\x5f\x46\x91\x15\x38\xdd\x03\xf5\xa8\x85\x3b\x96\x21\x8c\x25\xe5\x79\xff\x6e\x23\x91\xdb\x2b\xe8\x2e\x28\x46\xc9\x68\xd1\xe6\xaa\x07\x0e\x89\x9f\xba\xc1\x24\x8c\x42\xdf\x58\x3c\x3c\x83\x43\xe2\x37\x01\x14\x25\xec\xae\x5a\x6b\x16\xcd\x75\xac\x59\x20\xb7\xb1\xcd\xd9\xdc\x41\xb7\xd8\xe6\x71\x5a\x52\x4e\xd7\xf5\x7c\x05\xb1\xfc\x1f\x66\xfa\x0e\xdf\x91\xc9\xf5\xad\x29\xe9\xf0\xb9\x2d\x8e\x95\x74\x8d\x5f\xa0\x17\x63\x37\x8c\xbb\x19\x6b\xd1\xf5\x97\x23\xea\xf8\x3a\xc8\xeb\xb8\xfe\x1b\x00\x00\xff\xff\x08\x57\xff\xd5\x83\x11\x00\x00")

func scriptsDefaultCountersCsvBytes() ([]byte, error) {
	return bindataRead(
		_scriptsDefaultCountersCsv,
		"scripts/default-counters.csv",
	)
}

func scriptsDefaultCountersCsv() (*asset, error) {
	bytes, err := scriptsDefaultCountersCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/default-counters.csv", size: 4483, mode: os.FileMode(0644), modTime: time.Unix(1719375600, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x60, 0xf9, 0x71, 0x2d, 0x10, 0x58, 0xdd, 0x63, 0xf5, 0x54, 0x52, 0x81, 0xc0, 0x42, 0x8b, 0xd0, 0xb4, 0x22, 0x19, 0xf2, 0xc9, 0x52, 0x32, 0x70, 0xfe, 0xbd, 0x37, 0xa8, 0x1b, 0x97, 0x14}}
	return a, nil
}

var _scriptsSetDcgmExporterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8f\xd3\x30\x10\x85\xef\xf3\x2b\x1e\x4e\xa4\xc2\x21\xeb\xf6\xba\xb0\x20\xd8\x06\xb1\x07\x58\xa9\xcb\xc2\x01\xa1\xca\x75\x26\x89\xb5\xae\x1d\x6c\x47\xdb\x82\xf8\xef\x28\x69\xab\x85\x54\x22\x97\x68\x3c\x33\x9f\xdf\xcc\x73\xf6\x4c\x6e\x8c\x93\x1b\x15\x5b\xa2\xc8\x09\x05\x1f\x7e\x1e\x9d\xe9\xb8\x56\xc6\x12\x65\xa8\x62\x82\xe4\xa4\x29\x5b\xde\x7d\x5e\x2f\x6f\x56\x57\x62\x08\x05\x3d\x85\xf7\x91\x43\x94\x3f\x5b\xe5\x77\xc6\xc9\xaf\x3e\x3c\xc4\x4e\x69\x96\x8d\x49\x6d\xbf\xb9\xd0\x7e\x7b\x4a\x16\xef\xde\xcb\xca\xeb\x07\x0e\x45\xe2\x98\x06\x01\x95\x4a\x4a\x26\xde\x76\x82\x28\xee\x9d\x5e\xea\x66\x5b\xee\x3a\x1f\x12\x87\xe7\x2f\xf0\x8b\x00\xeb\xb5\xb2\x28\xbf\x94\xab\xb7\x37\xeb\x4f\xb7\xcb\x72\xfd\xe1\xf6\x63\x79\x25\xf2\x85\x20\x80\x75\xeb\x21\xa6\xd9\x4b\xe4\xd3\x23\x41\x04\xdc\xad\xae\x0f\xaa\xcf\xd2\xb2\xd2\xcd\xb6\xe0\xe3\xd5\x4f\xe4\x63\xc7\xd8\x9d\x41\x77\xa8\x4c\x20\x20\xf6\x95\x1f\xa2\x22\x40\xe4\xa7\x1a\x88\xfc\xb8\x96\xb1\xdc\xd4\xf8\x86\xfc\x0d\x0a\xfe\x81\x39\xbe\xbf\x44\x6a\xd9\x11\xc6\xef\x08\xef\xb5\xe6\x18\xeb\xde\xda\x3d\xb4\xef\x0c\x57\x98\x9d\x70\x33\x24\x8f\xd9\x89\x38\xbb\x18\x35\xd9\xc8\xff\x10\xca\x10\x7c\x80\xd7\xba\x0f\x81\x2b\x3c\xb6\xc6\xf2\x40\xda\x1b\xd7\xfc\x1f\x55\x1b\x02\x02\xa7\x3e\x38\xcc\xe9\xf7\x60\xf6\xb5\xb2\x76\x10\x89\xa9\x13\xa8\x7b\xa7\x93\xf1\x0e\x8f\x26\xb5\x63\x49\xe0\xe8\xfb\xa0\x19\x9d\x4a\x2d\x8d\xa3\x8a\x3c\x13\x28\x1c\x63\xf1\xd7\xb0\x07\x99\xf7\x51\x35\x7c\x89\x7c\x8e\x57\xd3\xc5\xbf\x1e\xe7\xda\x99\x84\x05\xd5\xe6\xfc\x15\x60\x30\xfa\x4f\x00\x00\x00\xff\xff\xc2\xfc\x39\x4f\xae\x02\x00\x00")

func scriptsSetDcgmExporterShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsSetDcgmExporterSh,
		"scripts/set-dcgm-exporter.sh",
	)
}

func scriptsSetDcgmExporterSh() (*asset, error) {
	bytes, err := scriptsSetDcgmExporterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/set-dcgm-exporter.sh", size: 686, mode: os.FileMode(0644), modTime: time.Unix(1718793461, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x76, 0xfc, 0x8c, 0xc5, 0xc9, 0xf9, 0x15, 0x9d, 0x23, 0x45, 0x58, 0x71, 0x99, 0xb1, 0xde, 0x56, 0x92, 0xbf, 0xf1, 0x97, 0x52, 0x93, 0xb1, 0x92, 0x1a, 0x2b, 0x73, 0x23, 0xa9, 0xda, 0x9b}}
	return a, nil
}

var _scriptsSetSystemctlServiceSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x6e\x1a\x31\x10\xbd\xcf\x57\xbc\x2e\x2b\xd1\x1e\xc8\x96\x6b\xda\x8d\x44\xc1\x52\x91\x9a\xa4\x82\x10\x0e\x08\x21\x67\x99\x05\x2b\xc6\x46\xf6\x00\x41\x51\xfe\xbd\xda\x65\x9b\x03\xa1\x3d\x8d\x34\x7e\x7e\xf3\xe6\xcd\x6b\x7d\xca\x9e\x8c\xcb\x9e\x74\x5c\x13\x45\x16\x74\xf8\x54\x3c\xb6\x66\xcb\xa5\x36\xb6\xee\x8f\x8f\x51\x78\xd3\x17\x3b\xe6\xb0\x37\x05\x7f\xfe\x82\x57\x02\xac\x2f\xb4\x85\x7a\x54\xa3\xde\x70\x71\x77\x3f\x50\x8b\x9f\xf7\xb7\x2a\x4f\xd2\x6e\x42\x00\x17\x6b\x8f\xe4\xfc\xf5\x1a\xe9\x79\x2b\x21\x6a\x61\xc0\xa5\x71\x0c\x59\x33\xe2\x69\x08\x84\x37\x5b\xab\x85\x09\x18\xab\xd1\xe3\xb0\xaf\x16\x0f\xea\xf6\xf7\xaf\xde\x83\xca\xdb\xb3\x89\x33\x32\xa7\x01\xc7\x22\x98\xad\x18\xef\x72\xb5\xe7\xd0\x1b\x62\xc4\xd1\xef\x42\xc1\xb8\xf3\x4b\x46\xa5\x98\x03\xf5\x4a\xe1\x90\x3b\x96\x83\x0f\xcf\x57\xa2\xc3\x8a\x85\x68\xd6\xec\x33\xa7\xa9\x0f\xcf\xc6\xad\x06\x26\x70\x21\x3e\x1c\xf3\x76\x92\xbe\x9e\x0b\x7d\x4b\xda\xa4\x5e\xb8\x18\x8b\x0e\xf2\x2f\x44\xc6\x7b\x0e\xda\x74\x42\x23\xa3\xe3\xfc\x92\x69\xc4\xb1\xfe\xa4\xed\x41\x1f\x23\x4d\x22\x87\x3c\x78\x5f\x69\x18\xba\x28\xda\xda\x39\x4d\xb5\x13\x5e\xfe\x38\xe6\x9b\x9d\x15\xd3\xd9\x45\x0e\x8d\xd2\x36\x11\xd0\xc2\x34\x18\xb9\x6c\x11\xc4\x43\xa3\x34\x96\x6b\xe0\xc9\xfa\xf4\xdc\xb5\x04\x37\x48\x3e\xda\x9f\x55\x2c\x17\x65\x5f\x35\x73\xde\xaf\x79\x91\x32\x63\x29\xb2\x58\x47\x64\xd9\xd4\xff\xb3\xbd\x55\x07\xef\x6b\x6b\x9b\x5d\x3e\xe4\x0b\xe5\xce\x15\xd5\x4d\x71\x30\xb2\xae\x51\x7f\x99\xb0\xd5\xb2\x26\x53\x62\x86\x24\x6d\x25\xe8\x38\x46\x17\xf3\x6f\x15\xc8\xbd\xeb\x9c\x44\xbd\xe2\x6b\xa4\x5f\xf1\xfd\x7c\xdd\x9b\x3a\x9b\x2f\x46\xd0\xa5\xd2\x5c\x8c\x37\xaa\x04\xff\x09\x00\x00\xff\xff\x09\x57\x84\xfd\x1c\x03\x00\x00")

func scriptsSetSystemctlServiceShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsSetSystemctlServiceSh,
		"scripts/set-systemctl-service.sh",
	)
}

func scriptsSetSystemctlServiceSh() (*asset, error) {
	bytes, err := scriptsSetSystemctlServiceShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/set-systemctl-service.sh", size: 796, mode: os.FileMode(0644), modTime: time.Unix(1718790325, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0xc2, 0xc, 0x4d, 0x9a, 0x76, 0x3a, 0xe5, 0x28, 0x53, 0xe2, 0xb0, 0xcd, 0x91, 0x64, 0xcf, 0xf7, 0xaf, 0x44, 0x7f, 0x8c, 0xe1, 0x2e, 0xb0, 0x32, 0x5c, 0x8e, 0x10, 0xca, 0x82, 0xb2, 0x14}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/1.x-compatibility-metrics.csv": scripts1XCompatibilityMetricsCsv,
	"scripts/check-step.sh":                 scriptsCheckStepSh,
	"scripts/dcp-metrics-included.csv":      scriptsDcpMetricsIncludedCsv,
	"scripts/default-counters.csv":          scriptsDefaultCountersCsv,
	"scripts/set-dcgm-exporter.sh":          scriptsSetDcgmExporterSh,
	"scripts/set-systemctl-service.sh":      scriptsSetSystemctlServiceSh,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": {nil, map[string]*bintree{
		"1.x-compatibility-metrics.csv": {scripts1XCompatibilityMetricsCsv, map[string]*bintree{}},
		"check-step.sh":                 {scriptsCheckStepSh, map[string]*bintree{}},
		"dcp-metrics-included.csv":      {scriptsDcpMetricsIncludedCsv, map[string]*bintree{}},
		"default-counters.csv":          {scriptsDefaultCountersCsv, map[string]*bintree{}},
		"set-dcgm-exporter.sh":          {scriptsSetDcgmExporterSh, map[string]*bintree{}},
		"set-systemctl-service.sh":      {scriptsSetSystemctlServiceSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
